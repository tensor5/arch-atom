# Maintainer: Nicola Squartini <tensor5@gmail.com>

_chromiumver=51.0.2704.106
pkgname=electron
pkgver=1.2.6
pkgrel=1
pkgdesc='Build cross platform desktop apps with web technologies'
arch=('i686' 'x86_64')
url='http://electron.atom.io/'
license=('MIT' 'custom')
depends=('ffmpeg' 'gconf' 'gtk3' 'libevent' 'libvpx' 'libxslt' 'libxss'
         'minizip' 'nss' 'protobuf' 're2' 'snappy')
makedepends=('clang' 'git' 'gperf' 'gtk2' 'harfbuzz-icu' 'jsoncpp' 'libexif'
             'libgnome-keyring' 'libnotify' 'ninja' 'npm' 'pciutils' 'python2'
             'yasm')
source=("git+https://github.com/electron/electron.git#tag=v${pkgver}"
        'git+https://github.com/boto/boto.git'
        'git+https://github.com/electron/brightray.git'
        'breakpad::git+https://github.com/electron/chromium-breakpad.git'
        'git+https://github.com/electron/crashpad.git'
        'git+https://github.com/electron/gyp.git'
        "git+https://github.com/electron/libchromiumcontent.git"
        'native_mate::git+https://github.com/zcbenz/native-mate.git'
        'git+https://github.com/electron/node.git'
        'git+https://github.com/kennethreitz/requests.git'
        'google-breakpad::git+https://chromium.googlesource.com/breakpad/breakpad/src'
        "https://github.com/zcbenz/chromium-source-tarball/releases/download/${_chromiumver}/chromium-${_chromiumver}.tar.xz"
        'dont-bootstrap-libchromiumcontent.patch'
        'dont-update-submodules.patch'
        'dont-use-sysroot.patch'
        'use-system-ninja.patch'
        'use-system-ffmpeg.patch'
        'chromium-use-system-ffmpeg.patch'
        'electron.sh'
       )
noextract=("chromium-${_chromiumver}.tar.xz")
sha256sums=('SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            'SKIP'
            '1b41d0397387a3e912d228bf383c768a712ed63f41ba931cc3be440b8fb86b98'
            '14dbd1eecb7034d9e19e1f0c61b0a36ed3b9c610db008ff2a6da2a540ade1221'
            '7fd0fc72a14b2a08ce0f258a750a9d181386b9277312f2ed5446c29b8ec4e282'
            '25aaa517c3acf66a5641a4987ef6f7270b44990cec9822696daeadb4ee22192a'
            'dc3286a1947240ab6ec562263af0b3c9971da2a4ab45970e3e664563e877280f'
            '314d0beb237dafe86bc5a2bd865f591503861cd272b1fca732f5f86ad96c0d89'
            'b4bc899c0b7e8fd4397ca466357bc8867d9d491ab62a8a9d76f5043240fda1ed'
            '7d49a587633c1a4a773f2a1510a12250de6b3c7a8fbb7928489c49f7ec6997ca')

prepare() {
  cd ${srcdir}/electron

  patch -Np1 -i ${srcdir}/use-system-ninja.patch
  patch -Np1 -i ${srcdir}/use-system-ffmpeg.patch
  patch -Np1 -i ${srcdir}/dont-update-submodules.patch
  patch -Np1 -i ${srcdir}/dont-use-sysroot.patch
  patch -Np1 -i ${srcdir}/dont-bootstrap-libchromiumcontent.patch

  mkdir -p ${srcdir}/python2-path
  ln -sf /usr/bin/python2 "${srcdir}/python2-path/python"

  for m in boto breakpad brightray crashpad native_mate node requests; do
    git submodule init vendor/${m}
    git config submodule.vendor/${m}.url ${srcdir}/${m}
  done
  git submodule update

  cd ${srcdir}/electron/vendor/breakpad
  git submodule init src
  git config submodule.src.url ${srcdir}/google-breakpad
  git submodule update

  cd ${srcdir}/electron/vendor/brightray
  for m in libchromiumcontent gyp; do
    git submodule init vendor/${m}
    git config submodule.vendor/${m}.url ${srcdir}/${m}
  done
  git submodule update
  # Add extra libraries for unbundling
  sed -e "s/'-lexpat',/'-lexpat', '<\!@(pkg-config --libs-only-l libavcodec libavformat libavutil libevent flac harfbuzz-icu jsoncpp minizip libpng protobuf vpx libwebpdemux libxml-2.0 libxslt)', '-ljpeg', '-lre2', '-lsnappy', '-latomic',/" \
      -e 's/gtk+-2\.0/gtk+-3.0/' \
      -i brightray.gyp

  cd ${srcdir}/electron/vendor/brightray/vendor/libchromiumcontent
  git submodule update --init vendor/python-patch
  _chromium_flags=('fastbuild=2'
                   'host_clang=0'
                   'release_extra_cflags="-O3 -Wno-error"'  # -Wno-error required by bundled ICU
                   'remove_webcore_debug_symbols=1'
                   'use_gtk3=1'
                   'use_sysroot=0'
                   'use_system_expat=1'
                   'use_system_ffmpeg=1'
                   'use_system_flac=1'
                   'use_system_harfbuzz=1'
                   'use_system_jsoncpp=1'
                   'use_system_libevent=1'
                   'use_system_libjpeg=1'
                   'use_system_libpng=1'
                   'use_system_libvpx=1'
                   'use_system_libwebp=1'
                   'use_system_libxml=1'
                   'use_system_libxslt=1'
                   'use_system_protobuf=1'
                   'use_system_re2=1'
                   'use_system_snappy=1'
                   'use_system_yasm=1'
                   'use_system_zlib=1'
                  )
  cd vendor/chromium
  echo "{" > chromium.gyp_env
  echo "  'GYP_DEFINES': '${_chromium_flags[*]}'" >> chromium.gyp_env
  echo "}" >> chromium.gyp_env
  echo 'Extracting chromium source...'
  tar -xJf "${srcdir}"/chromium-${_chromiumver}.tar.xz
  if [[ -d chromium-${_chromiumver} ]]; then
    rm -rf src/chromium-${_chromiumver}
  fi
  mv chromium-${_chromiumver} src
  if [ ! -e src/.version ]; then
    echo "${_chromiumver}" > src/.version
  fi
  cd src
  python2 build/linux/unbundle/replace_gyp_files.py "${_chromium_flags[@]/#/-D}"
}

build() {
  export PATH="${srcdir}/python2-path:${PATH}"

  if [ "${CARCH}" == 'x86_64' ]; then
    _target=x64
  else
    _target=ia32
  fi

  cd ${srcdir}/electron
  LDFLAGS="${LDFLAGS} -Wl,-z,noexecstack"
  script/bootstrap.py --verbose \
                      --target_arch=${_target} \
                      --clang_dir=/usr \
                      --build_libchromiumcontent
  script/build.py -c Release
}

package() {
  cd ${srcdir}/electron

  _cc=${srcdir}/electron/vendor/brightray/vendor/libchromiumcontent/dist/main

  install -d -m755 ${pkgdir}/usr/share/licenses/electron
  install -m644 LICENSE "${_cc}"/LICENSES.chromium.html \
          ${pkgdir}/usr/share/licenses/electron

  cd out/R
  install -d -m755 ${pkgdir}/usr/lib/electron
  install -m644 content_shell.pak icudtl.dat natives_blob.bin snapshot_blob.bin \
          ${pkgdir}/usr/lib/electron
  install -m755 electron ${pkgdir}/usr/lib/electron
  install -D -m755 ${srcdir}/electron.sh ${pkgdir}/usr/bin/electron
  # namcap warning: Referenced library 'libnode.so' is an uninstalled dependency
  # Fixable by moving libnode.so to /usr/lib
  install -m644 libnode.so ${pkgdir}/usr/lib/electron
  cp -r locales resources ${pkgdir}/usr/lib/electron

  echo -n "v${pkgver}" > ${pkgdir}/usr/lib/electron/version

  # Install Node headers
  _headers_dest="${pkgdir}/usr/lib/electron/node"
  install -d -m755 "${_headers_dest}"
  cd "${srcdir}"/electron/vendor/node
  find src deps/http_parser deps/zlib deps/uv deps/npm \
    -name "*.gypi" \
      -exec install -D -m644 '{}' "${_headers_dest}/{}" \; \
    -or -name "*.h" \
      -exec install -D -m644 '{}' "${_headers_dest}/{}" \;
  install -m644 {common,config}.gypi "${_headers_dest}"
  cd "${_cc}"/src
  find v8 -name "*.h" \
    -exec install -D -m644 '{}' "${_headers_dest}/deps/{}" \;
  # echo '9' > "${_headers_dest}/installVersion"
}
